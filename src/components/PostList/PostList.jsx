// Импортируем компонент PostItem для отображения отдельного поста
import PostItem from '../PostItem/PostItem.jsx';

// Импортируем CSS модуль для стилизации компонента
import styles from './PostList.module.scss';

// Определяем функциональный компонент PostList, который принимает три пропса:
// posts - массив постов для отображения
// loading - флаг, указывающий на процесс загрузки данных
// error - строка с сообщением об ошибке, если она возникла
const PostList = ({ posts, loading, error }) => {
  
  // Если данные в процессе загрузки, отображаем индикатор загрузки
  if (loading) {
    return (
      // Основной контейнер компонента
      <div className={styles.container}>
        {/* Контейнер для состояния загрузки */}
        <div className={styles.loading}>
          {/* Анимированный спиннер (круглый индикатор загрузки) */}
          <div className={styles.spinner}></div>
          {/* Текст, информирующий пользователя о процессе загрузки */}
          <p>Загрузка постов...</p>
        </div>
      </div>
    );
  }

  // Если произошла ошибка при загрузке данных, отображаем сообщение об ошибке
  if (error) {
    return (
      // Основной контейнер компонента
      <div className={styles.container}>
        {/* Контейнер для состояния ошибки */}
        <div className={styles.error}>
          {/* Заголовок сообщения об ошибке */}
          <h3>Ошибка загрузки</h3>
          {/* Отображение текста ошибки, переданного через пропс error */}
          <p>{error}</p>
        </div>
      </div>
    );
  }

  // Если массив постов пустой (нет данных для отображения)
  if (posts.length === 0) {
    return (
      // Основной контейнер компонента
      <div className={styles.container}>
        {/* Контейнер для состояния отсутствия данных */}
        <div className={styles.empty}>
          {/* Заголовок, сообщающий об отсутствии постов */}
          <h3>Посты не найдены</h3>
          {/* Подсказка пользователю о возможных действиях */}
          <p>Попробуйте изменить фильтры или перейти на другую страницу</p>
        </div>
      </div>
    );
  }

  // Основной рендеринг компонента - отображение списка постов
  return (
    // Основной контейнер компонента
    <div className={styles.container}>
      {/* Контейнер для списка постов */}
      <div className={styles.postList}>
        {/* Маппинг (преобразование) массива постов в массив компонентов PostItem */}
        {posts.map((post) => (
          // Для каждого поста создаем компонент PostItem
          // key - уникальный идентификатор (обязательный атрибут для элементов в массиве React)
          // post - передаем объект поста в качестве пропса в компонент PostItem
          <PostItem key={post.id} post={post} />
        ))}
      </div>
    </div>
  );
};

// Экспортируем компонент для использования в других частях приложения
export default PostList;




